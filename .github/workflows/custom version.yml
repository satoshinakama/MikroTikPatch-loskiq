name: Patch v7

on:
  workflow_dispatch:

permissions:
  contents: write

env:
  MIKRO_NPK_SIGN_PUBLIC_KEY: C293CED638A2A33C681FC8DE98EE26C54EADC5390C2DFCE197D35C83C416CF59
  MIKRO_LICENSE_PUBLIC_KEY: 8E1067E4305FCDC0CFBF95C10F96E5DFE8C49AEF486BD1A4E2E96C27F01E3E32
  CUSTOM_NPK_SIGN_PRIVATE_KEY: 7D008D9B80B036FB0205601FEE79D550927EBCA937B7008CC877281F2F8AC640
  CUSTOM_NPK_SIGN_PUBLIC_KEY: 28F886E32C141123126CFBCAD56766E99D1720CEB1F12BE2468BEBE7662FBEDB
  CUSTOM_LICENSE_PRIVATE_KEY: 9DBC845E9018537810FDAE62824322EEE1B12BAD81FCA28EC295FB397C61CE0B
  CUSTOM_LICENSE_PUBLIC_KEY: 723A34A6E3300F23E4BAA06156B9327514AEC170732655F16E04C17928DD770F

jobs:
  patch:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86, arm, arm64, mipsbe, mmips, smips, ppc]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y mkisofs xorriso qemu-utils extlinux --no-install-recommends
          sudo pip install -r requirements.txt

      - name: Check latest version
        id: get_latest
        run: |
          echo "System Info: $(uname -a)"

          VERSION="7.16.1"
          echo "Using specified version: $VERSION"

          # Fetch and display changelog
          curl -s -o CHANGELOG https://upgrade.mikrotik.com/routeros/$VERSION/CHANGELOG
          cat CHANGELOG

          echo "LATEST_VERSION=$VERSION" >> $GITHUB_ENV
          echo "has_new_version=true" >> $GITHUB_ENV  # Ensuring this output is correctly set

          # Determine architecture suffix
          case "${{ matrix.arch }}" in
            x86) ARCH='' ;;
            arm) ARCH='-arm' ;;
            arm64) ARCH='-arm64' ;;
            mipsbe) ARCH='-mipsbe' ;;
            mmips) ARCH='-mmips' ;;
            smips) ARCH='-smips' ;;
            ppc) ARCH='-ppc' ;;
          esac

          echo "ARCH=$ARCH" >> $GITHUB_ENV

      - name: Cache mikrotik ISO
        id: cache_mikrotik
        uses: actions/cache@v4
        with:
          path: mikrotik.iso
          key: mikrotik-${{ env.LATEST_VERSION }}-${{ matrix.arch }}

      - name: Download mikrotik ISO
        if: env.has_new_version == 'true' && steps.cache_mikrotik.outputs.cache-hit != 'true'
        run: |
          sudo curl -s -o mikrotik.iso https://download.mikrotik.com/routeros/$LATEST_VERSION/mikrotik-$LATEST_VERSION$ARCH.iso

      - name: Patch mikrotik ISO
        if: env.has_new_version == 'true'
        run: |
          sudo mkdir iso
          sudo mount -o loop,ro mikrotik.iso iso/
          sudo mkdir new_iso
          sudo cp -r iso/* new_iso/
          sudo rsync -a iso/ new_iso/
          sudo umount iso/
          sudo rm -rf iso/
          
          NPK_FILES=$(find new_iso/*.npk)
          for file in $NPK_FILES; do
            sudo -E python3 patch.py npk $file
          done

          sudo cp new_iso/routeros-$LATEST_VERSION*.npk routeros-$LATEST_VERSION$ARCH-patched.npk
          
          sudo mkdir efiboot
          sudo mount -o loop new_iso/efiboot.img efiboot/
          
          if [ "${{ matrix.arch }}" == "x86" ]; then
            sudo -E python3 patch.py kernel efiboot/linux.x86_64
            sudo cp efiboot/linux.x86_64 new_iso/isolinux/linux
            sudo umount efiboot/
            sudo mkisofs -o mikrotik-$LATEST_VERSION$ARCH-patched.iso \
                         -V "MikroTik $LATEST_VERSION $ARCH" \
                         -sysid "" -preparer "MiKroTiK" \
                         -publisher "" -A "MiKroTiK RouterOS" \
                         -input-charset utf-8 \
                         -b isolinux/isolinux.bin \
                         -c isolinux/boot.cat \
                         -no-emul-boot \
                         -boot-load-size 4 \
                         -boot-info-table \
                         -eltorito-alt-boot \
                         -e efiboot.img \
                         -no-emul-boot \
                         -R -J \
                         new_iso/
          elif [ "${{ matrix.arch }}" == "arm64" ]; then
            sudo -E python3 patch.py kernel efiboot/EFI/BOOT/BOOTAA64.EFI
            sudo umount efiboot/
            sudo xorriso -as mkisofs -o mikrotik-$LATEST_VERSION$ARCH-patched.iso \
                         -V "MikroTik $LATEST_VERSION ${{ matrix.arch }}" \
                         -sysid "" -preparer "MiKroTiK" \
                         -publisher "" -A "MiKroTiK RouterOS" \
                         -input-charset utf-8 \
                         -b efiboot.img \
                         -no-emul-boot \
                         -R -J \
                         new_iso/
          fi

          sudo rm -rf efiboot/
          sudo mkdir all_packages_iso$ARCH-$LATEST_VERSION
          sudo cp new_iso/*.npk all_packages_iso$ARCH-$LATEST_VERSION/
          sudo rm -rf new_iso/
          
          cd all_packages_iso$ARCH-$LATEST_VERSION/
          sudo zip ../all_packages$ARCH-$LATEST_VERSION-patched.zip *.npk
          cd ../

      - name: Cache refind
        if: env.has_new_version == 'true' && matrix.arch == 'x86'
        id: cache_refind
        uses: actions/cache@v4
        with:
          path: refind-bin-0.14.2.zip
          key: refind

      - name: Get refind
        if: env.has_new_version == 'true' && steps.cache_refind.outputs.cache-hit != 'true'
        run: |
          sudo curl -s -o refind-bin-0.14.2.zip https://nchc.dl.sourceforge.net/project/refind/0.14.2/refind-bin-0.14.2.zip
