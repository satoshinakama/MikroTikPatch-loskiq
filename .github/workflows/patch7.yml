name: Patch v7

on:
  workflow_dispatch:

permissions:
  contents: write

env:
  ROUTEROS_VERSION: 17.19.2
  MIKRO_NPK_SIGN_PUBLIC_KEY: C293CED638A2A33C681FC8DE98EE26C54EADC5390C2DFCE197D35C83C416CF59
  MIKRO_LICENSE_PUBLIC_KEY: 8E1067E4305FCDC0CFBF95C10F96E5DFE8C49AEF486BD1A4E2E96C27F01E3E32
  CUSTOM_NPK_SIGN_PRIVATE_KEY: 7D008D9B80B036FB0205601FEE79D550927EBCA937B7008CC877281F2F8AC640
  CUSTOM_NPK_SIGN_PUBLIC_KEY: 28F886E32C141123126CFBCAD56766E99D1720CEB1F12BE2468BEBE7662FBEDB
  CUSTOM_LICENSE_PRIVATE_KEY: 9DBC845E9018537810FDAE62824322EEE1B12BAD81FCA28EC295FB397C61CE0B
  CUSTOM_LICENSE_PUBLIC_KEY: 723A34A6E3300F23E4BAA06156B9327514AEC170732655F16E04C17928DD770F

jobs:
  patch:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86, arm, arm64, mipsbe, mmips, smips, ppc]

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y mkisofs xorriso qemu-utils extlinux --no-install-recommends
        sudo pip install -r requirements.txt

    - name: Cache mikrotik-${{ env.ROUTEROS_VERSION }}${{ matrix.arch }}.iso
      id: cache_mikrotik
      uses: actions/cache@v4
      with:
        path: mikrotik.iso
        key: mikrotik-${{ env.ROUTEROS_VERSION }}-${{ matrix.arch }}

    - name: Get mikrotik-${{ env.ROUTEROS_VERSION }}${{ matrix.arch }}.iso
      if: steps.cache_mikrotik.outputs.cache-hit != 'true' && (matrix.arch == 'x86' || matrix.arch == 'arm64')
      run: |
        sudo curl -s -o mikrotik.iso https://download.mikrotik.com/routeros/${{ env.ROUTEROS_VERSION }}/mikrotik-${{ env.ROUTEROS_VERSION }}${{ matrix.arch }}.iso

    - name: Patch mikrotik-${{ env.ROUTEROS_VERSION }}${{ matrix.arch }}.iso
      if: matrix.arch == 'x86' || matrix.arch == 'arm64'
      run: |
        sudo mkdir iso
        sudo mount -o loop,ro mikrotik.iso iso/
        sudo mkdir new_iso
        sudo cp -r iso/* new_iso/
        sudo rsync -a iso/ new_iso/
        sudo umount iso/
        sudo rm -rf iso/
        NPK_FILES=$(find new_iso/*.npk)
        for file in $NPK_FILES; do
          sudo -E python3 patch.py npk $file
        done
        sudo cp new_iso/routeros-${{ env.ROUTEROS_VERSION }}*.npk routeros-${{ env.ROUTEROS_VERSION }}${{ matrix.arch }}-patched.npk

    - name: Create Release tag ${{ env.ROUTEROS_VERSION }}
      uses: softprops/action-gh-release@v2
      with:
        name: "RouterOS ${{ env.ROUTEROS_VERSION }}"
        tag_name: ${{ env.ROUTEROS_VERSION }}
        files: |
          mikrotik-${{ env.ROUTEROS_VERSION }}${{ matrix.arch }}-patched.iso
