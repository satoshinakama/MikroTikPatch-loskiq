name: Patch v7

on:
  workflow_dispatch:

permissions:
  contents: write

env:
  MIKRO_NPK_SIGN_PUBLIC_KEY: C293CED638A2A33C681FC8DE98EE26C54EADC5390C2DFCE197D35C83C416CF59
  MIKRO_LICENSE_PUBLIC_KEY: 8E1067E4305FCDC0CFBF95C10F96E5DFE8C49AEF486BD1A4E2E96C27F01E3E32
  CUSTOM_NPK_SIGN_PRIVATE_KEY: 7D008D9B80B036FB0205601FEE79D550927EBCA937B7008CC877281F2F8AC640
  CUSTOM_NPK_SIGN_PUBLIC_KEY: 28F886E32C141123126CFBCAD56766E99D1720CEB1F12BE2468BEBE7662FBEDB
  CUSTOM_LICENSE_PRIVATE_KEY: 9DBC845E9018537810FDAE62824322EEE1B12BAD81FCA28EC295FB397C61CE0B
  CUSTOM_LICENSE_PUBLIC_KEY: 723A34A6E3300F23E4BAA06156B9327514AEC170732655F16E04C17928DD770F

jobs:
  patch:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86, arm, arm64, mipsbe, mmips, smips, ppc]

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y mkisofs xorriso qemu-utils extlinux unzip zip --no-install-recommends
        sudo pip install -r requirements.txt

    - name: Check latest version
      id: get_latest
      run: |
        echo $(uname -a)
        NEWEST=$(curl -s https://upgrade.mikrotik.com/routeros/NEWESTa7.stable)
        LATEST_VERSION=$(echo "$NEWEST" | cut -d' ' -f1)
        BUILD_TIME=$(echo "$NEWEST" | cut -d' ' -f2)
        echo "Latest Version: $LATEST_VERSION"
        echo "Build Time: $BUILD_TIME"

        # Handle first run if latest7.txt missing
        if [ -f latest7.txt ]; then
          _LATEST_VERSION=$(cut -d ' ' -f1 latest7.txt)
        else
          _LATEST_VERSION=""
        fi

        if [ "$_LATEST_VERSION" == "$LATEST_VERSION" ]; then
          echo "No new version found"
          echo "has_new_version=false" >> $GITHUB_OUTPUT
          exit 0
        fi

        echo "has_new_version=true" >> $GITHUB_OUTPUT
        curl -s -o CHANGELOG https://upgrade.mikrotik.com/routeros/$LATEST_VERSION/CHANGELOG
        cat CHANGELOG
        echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV

        case "${{ matrix.arch }}" in
          x86)    ARCH="" ;;
          arm)    ARCH="-arm" ;;
          arm64)  ARCH="-arm64" ;;
          mipsbe) ARCH="-mipsbe" ;;
          mmips)  ARCH="-mmips" ;;
          smips)  ARCH="-smips" ;;
          ppc)    ARCH="-ppc" ;;
        esac
        echo "ARCH=$ARCH" >> $GITHUB_ENV

    - name: Cache mikrotik iso
      if: steps.get_latest.outputs.has_new_version == 'true' && (matrix.arch == 'x86' || matrix.arch == 'arm64')
      id: cache_mikrotik
      uses: actions/cache@v4
      with:
        path: mikrotik.iso
        key: mikrotik-${{ env.LATEST_VERSION }}-${{ env.ARCH }}

    - name: Get mikrotik iso
      if: steps.get_latest.outputs.has_new_version == 'true' && steps.cache_mikrotik.outputs.cache-hit != 'true' && (matrix.arch == 'x86' || matrix.arch == 'arm64')
      run: |
        curl -s -o mikrotik.iso https://download.mikrotik.com/routeros/${{ env.LATEST_VERSION }}/mikrotik-${{ env.LATEST_VERSION }}${{ env.ARCH }}.iso

    - name: Patch mikrotik iso
      if: steps.get_latest.outputs.has_new_version == 'true' && (matrix.arch == 'x86' || matrix.arch == 'arm64')
      run: |
        sudo mkdir iso new_iso efiboot
        sudo mount -o loop,ro mikrotik.iso iso/
        sudo cp -r iso/* new_iso/
        sudo umount iso && rm -rf iso

        for file in new_iso/*.npk; do
          sudo -E python3 patch.py npk "$file"
        done
        sudo cp new_iso/routeros-${{ env.LATEST_VERSION }}*.npk routeros-${{ env.LATEST_VERSION }}${{ env.ARCH }}-patched.npk

        sudo mount -o loop new_iso/efiboot.img efiboot/
        if [ "${{ matrix.arch }}" == "x86" ]; then
          sudo -E python3 patch.py kernel efiboot/linux.x86_64
          sudo cp efiboot/linux.x86_64 new_iso/isolinux/linux
          sudo umount efiboot
          sudo mkisofs -o mikrotik-${{ env.LATEST_VERSION }}${{ env.ARCH }}-patched.iso \
                       -V "MikroTik ${{ env.LATEST_VERSION }} ${{ matrix.arch }}" \
                       -b isolinux/isolinux.bin -c isolinux/boot.cat \
                       -no-emul-boot -boot-load-size 4 -boot-info-table \
                       -eltorito-alt-boot -e efiboot.img -no-emul-boot \
                       -R -J new_iso/
        elif [ "${{ matrix.arch }}" == "arm64" ]; then
          sudo -E python3 patch.py kernel efiboot/EFI/BOOT/BOOTAA64.EFI
          sudo umount efiboot
          sudo xorriso -as mkisofs -o mikrotik-${{ env.LATEST_VERSION }}${{ env.ARCH }}-patched.iso \
                       -V "MikroTik ${{ env.LATEST_VERSION }} ${{ matrix.arch }}" \
                       -b efiboot.img -no-emul-boot -R -J new_iso/
        fi
        rm -rf efiboot new_iso

    - name: Update latest version
      if: steps.get_latest.outputs.has_new_version == 'true' && matrix.arch == 'x86'
      run: |
        echo "${{ env.LATEST_VERSION }} $(date +%s)" > latest7.txt
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git add latest7.txt
        git commit -m "Update latest version to ${{ env.LATEST_VERSION }}"
        git push

    - name: Create Release tag ${{ env.LATEST_VERSION }}
      if: steps.get_latest.outputs.has_new_version == 'true' && matrix.arch == 'x86'
      uses: softprops/action-gh-release@v2
      with:
        name: "RouterOS ${{ env.LATEST_VERSION }}"
        body_path: "CHANGELOG"
        tag_name: ${{ env.LATEST_VERSION }}
        make_latest: true
        files: |
          mikrotik-${{ env.LATEST_VERSION }}${{ env.ARCH }}-patched.iso
          routeros-${{ env.LATEST_VERSION }}${{ env.ARCH }}-patched.npk
